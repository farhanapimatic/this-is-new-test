# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AwseCommerceService
  # AWSECommerceServiceBindingController
  class AWSECommerceServiceBindingController < BaseController
    @instance = AWSECommerceServiceBindingController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search9(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup10(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get13(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add14(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create15(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify16(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear17(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search18(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup19(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get22(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add23(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create24(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify25(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear26(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search27(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup28(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get31(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add32(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create33(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify34(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear35(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search36(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup37(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get40(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add41(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create42(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify43(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear44(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search45(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup46(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get49(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add50(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create51(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify52(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear53(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search54(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup55(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get58(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add59(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create60(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify61(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear62(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search63(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup64(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get67(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add68(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create69(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify70(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear71(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search72(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup73(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get76(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add77(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create78(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify79(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear80(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search81(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup82(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get85(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add86(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create87(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify88(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear89(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search90(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup91(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get94(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add95(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create96(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify97(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear98(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup11(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup12(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup20(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup21(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup29(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup30(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup38(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup39(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup47(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup48(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup56(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup57(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup65(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup66(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup74(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup75(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup83(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup84(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup92(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup93(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end
  end
end
